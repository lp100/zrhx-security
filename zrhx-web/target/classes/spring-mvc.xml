<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
     	http://www.springframework.org/schema/aop 
     	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc 
     	http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

	<context:component-scan base-package="org.com.zrhx" />
	<context:annotation-config />
	<!--在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，
	它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，
	就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。-->
	<mvc:default-servlet-handler />
	<!--通过配置织入@Aspectj切面-->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <value>WriteMapNullValue</value>
                        <value>QuoteFieldNames</value>
                        <value>WriteDateUseDateFormat</value>
						<!-- 禁用fastjson循环引用检测 -->
						<value>DisableCircularReferenceDetect</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- Velocity视图解析器    默认视图  -->
	<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="viewNames" value="*.html" />
        <property name="suffix" value=""/>
        <property name="dateToolAttribute" value="date" />
        <property name="numberToolAttribute" value="number" /> 
        <property name="toolboxConfigLocation" value="/WEB-INF/velocity-toolbox.xml" />
        <property name="requestContextAttribute" value="rc"/>
        <property name="order" value="0"/>
	</bean>
	
	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/page/" />
        <property name="velocityProperties">
          <props>
            <prop key="input.encoding">UTF-8</prop>
            <prop key="output.encoding">UTF-8</prop>
            <prop key="contentType">text/html;charset=UTF-8</prop>
          </props>
        </property>
	</bean>
	
	<!-- JSP视图解析器  -->
    <bean id="viewResolverJsp" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!--前缀-->
        <property name="prefix" value="/WEB-INF/page/"/>
		<!--要解析的类型-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="viewNames" value="*.jsp" />
        <property name="suffix" value=""/>
        <property name="order" value="1"/>
    </bean>
    
    <!-- FreeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
	    <property name="contentType" value="text/html; charset=utf-8"/>
	    <property name="cache" value="false"/>
	    <property name="viewNames" value="*.ftl" />
        <property name="suffix" value=""/>
        <property name="order" value="2"/>
	</bean>
	
	<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	    <property name="templateLoaderPath" value="/WEB-INF/page/"/>
	</bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1000000000" />
	</bean>
	
	<!-- Kaptcha验证码生成器 -->
	<bean name="producer" class="com.google.code.kaptcha.impl.DefaultKaptcha" scope="singleton">
	    <property name="config">
	        <bean class="com.google.code.kaptcha.util.Config">
	            <constructor-arg>
	                <props>
	                    <prop key="kaptcha.border">no</prop>
	                    <prop key="kaptcha.textproducer.font.color">black</prop>
	                    <prop key="kaptcha.textproducer.char.space">5</prop>
	                </props>
				    <!--kaptcha.border  是否有边框  默认为true  我们可以自己设置yes，no  
						kaptcha.border.color   边框颜色   默认为Color.BLACK  
						kaptcha.border.thickness  边框粗细度  默认为1  
						kaptcha.producer.impl   验证码生成器  默认为DefaultKaptcha  
						kaptcha.textproducer.impl   验证码文本生成器  默认为DefaultTextCreator  
						kaptcha.textproducer.char.string   验证码文本字符内容范围  默认为abcde2345678gfynmnpwx  
						kaptcha.textproducer.char.length   验证码文本字符长度  默认为5  
						kaptcha.textproducer.font.names    验证码文本字体样式  默认为new Font("Arial", 1, fontSize), new Font("Courier", 1, fontSize)  
						kaptcha.textproducer.font.size   验证码文本字符大小  默认为40  
						kaptcha.textproducer.font.color  验证码文本字符颜色  默认为Color.BLACK  
						kaptcha.textproducer.char.space  验证码文本字符间距  默认为2  
						kaptcha.noise.impl    验证码噪点生成对象  默认为DefaultNoise  
						kaptcha.noise.color   验证码噪点颜色   默认为Color.BLACK  
						kaptcha.obscurificator.impl   验证码样式引擎  默认为WaterRipple  
						kaptcha.word.impl   验证码文本字符渲染   默认为DefaultWordRenderer  
						kaptcha.background.impl   验证码背景生成器   默认为DefaultBackground  
						kaptcha.background.clear.from   验证码背景颜色渐进   默认为Color.LIGHT_GRAY  
						kaptcha.background.clear.to   验证码背景颜色渐进   默认为Color.WHITE  
						kaptcha.image.width   验证码图片宽度  默认为200  
						kaptcha.image.height  验证码图片高度  默认为50 -->
	            </constructor-arg>
	        </bean>
	    </property>
	</bean>
</beans>